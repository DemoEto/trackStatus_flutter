import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';

class AuthService extends ChangeNotifier {
  final FirebaseAuth _firebaseAuth = FirebaseAuth.instance;

  User? get currentUser =>
      _firebaseAuth.currentUser; // !-- currentUser = null for sure

  AuthService() {
    _firebaseAuth.authStateChanges().listen((_) {
      notifyListeners(); // ‡πÅ‡∏à‡πâ‡∏á GoRouter ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
    });
  }

  Stream<User?> get authStateChanges => _firebaseAuth.authStateChanges();

  Future<void> signIn({required String email, password}) async {
    await _firebaseAuth.signInWithEmailAndPassword(
      email: email,
      password: password,
    );
  }

  Future<void> register({
    required String email,
    required String password,
    required String displayName,
  }) async {
    try {
      // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
      UserCredential userCredential = await FirebaseAuth.instance
          .createUserWithEmailAndPassword(email: email, password: password);
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï displayName
      await userCredential.user?.updateDisplayName(displayName);

      // ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï reference
      await userCredential.user?.reload();
      // üî• ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î user ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
      User? updatedUser = FirebaseAuth.instance.currentUser;
      // ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏π‡πâ
      notifyListeners();

      print('‚úÖ Registered user: ${updatedUser?.displayName}');
    } catch (e) {
      print('\n‚ùå Register Error: ${e.toString()}\n');
    }
  }

  Future<void> signOut() async {
    await _firebaseAuth.signOut();
  }

  Future<void> reloadUser() async {
    await _firebaseAuth.currentUser?.reload();
    notifyListeners(); // ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ GoRouter ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏î‡πâ‡∏ß‡∏¢
  }
}

// ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô router
final authService = AuthService();
