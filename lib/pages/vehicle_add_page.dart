import 'dart:async';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';

import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

/// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ + ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏õ Firebase Storage
/// Firestore: Users/{uid} ‚Üí carImg (URL String), carPlate, busId
class UploadImagePage extends StatefulWidget {
  const UploadImagePage({super.key});

  @override
  State<UploadImagePage> createState() => _UploadImagePageState();
}

class _UploadImagePageState extends State<UploadImagePage> {
  final _formKey = GlobalKey<FormState>();
  final _plateCtrl = TextEditingController();

  File? _imageFile;
  bool _isLoading = false;

  /// ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ (UI) ‚Üí map ‡πÄ‡∏õ‡πá‡∏ô busId: "privateCar" | "schoolBus"
  String _vehicleType = "‡∏£‡∏ñ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß";

  @override
  void dispose() {
    _plateCtrl.dispose();
    super.dispose();
  }

  Future<void> _pickImage() async {
    final picked = await ImagePicker().pickImage(
      source: ImageSource.gallery,
      imageQuality: 90, // ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
    );
    if (picked != null) setState(() => _imageFile = File(picked.path));
  }

  /// ‡πÉ‡∏ä‡πâ **‡∏ö‡∏±‡∏Ñ‡πÄ‡∏Å‡πá‡∏ï‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå** ‡πÄ‡∏™‡∏°‡∏≠ (‡∏Å‡∏±‡∏ô‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå/Emulator)
  FirebaseStorage _storageForCurrentApp() {
    return FirebaseStorage.instanceFor(
      bucket:
          'gs://trackstatus-flutter.appspot.com', // <- ‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Console
    );
  }

  /// ‡πÄ‡∏î‡∏≤‡∏à‡∏≤‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏™‡πà contentType ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  String _guessMimeType(String path) {
    final p = path.toLowerCase();
    if (p.endsWith('.png')) return 'image/png';
    if (p.endsWith('.webp')) return 'image/webp';
    if (p.endsWith('.jpg') || p.endsWith('.jpeg')) return 'image/jpeg';
    return 'application/octet-stream';
  }

  /// ‡∏£‡∏µ‡∏ó‡∏£‡∏≤‡∏¢ getDownloadURL() ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ latency/consistency ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
  Future<String> _safeGetDownloadURL(Reference ref) async {
    const tries = 3;
    for (int i = 0; i < tries; i++) {
      try {
        return await ref.getDownloadURL();
      } on FirebaseException catch (e) {
        if (e.code == 'object-not-found' && i < tries - 1) {
          await Future.delayed(Duration(milliseconds: 300 * (1 << i)));
          continue;
        }
        rethrow;
      }
    }
    return await ref.getDownloadURL();
  }

  /// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ + ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ (carImg ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô URL String)
  Future<void> _save() async {
    if (!_formKey.currentState!.validate()) return;

    if (_imageFile == null) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏£‡∏ñ‡∏Å‡πà‡∏≠‡∏ô")));
      return;
    }

    final user = FirebaseAuth.instance.currentUser;
    if (user == null) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô")));
      return;
    }

    setState(() => _isLoading = true);

    try {
      final uid = user.uid;
      final ext = _imageFile!.path.split('.').last;
      final fileName = 'car_${DateTime.now().millisecondsSinceEpoch}.$ext';

      final storage = _storageForCurrentApp();
      debugPrint('üì¶ Using bucket: ${storage.bucket}');
      final ref = storage.ref().child('users/$uid/$fileName');
      // 1) ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
      final metadata = SettableMetadata(
        contentType: _guessMimeType(_imageFile!.path),
      );
      // final snapshot = await ref.putFile(_imageFile!, metadata);

      // if (snapshot.totalBytes == 0) {
      //   throw FirebaseException(
      //     plugin: 'firebase_storage',
      //     code: 'upload-empty',
      //     message: '‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÑ‡∏ö‡∏ï‡πå',
      //   );
      // }

      // debugPrint('‚úÖ Upload done ‚Üí bucket=${snapshot.ref.bucket} path=${snapshot.ref.fullPath} bytes=${snapshot.totalBytes}');

      // // 2) ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏à‡∏£‡∏¥‡∏á + ‡∏Ç‡∏≠ URL (‡∏°‡∏µ‡∏£‡∏µ‡∏ó‡∏£‡∏≤‡∏¢)
      // await snapshot.ref.getMetadata();
      // final String url = await _safeGetDownloadURL(snapshot.ref); // <-- URL String
      // debugPrint('üîó Download URL = $url');

      // // 3) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤ Firestore ‚Üí Users/{uid}
      // await FirebaseFirestore.instance.collection('Users').doc(uid).set({
      //   'carImg': url,                                   // <-- String URL
      //   'carPlate': _plateCtrl.text.trim(),
      //   'busId': _vehicleType == "‡∏£‡∏ñ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" ? "schoolBus" : "privateCar",
      //   'createdAt': FieldValue.serverTimestamp(),
      //   'updatedAt': FieldValue.serverTimestamp(),
      // }, SetOptions(merge: true));

      // if (!mounted) return;
      // ScaffoldMessenger.of(context)
      //     .showSnackBar(const SnackBar(content: Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ')));
      // Navigator.pop(context);
    } on FirebaseException catch (e) {
      if (!mounted) return;
      final code = e.code;
      final msg = e.message ?? '';
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: [$code] $msg'
            '\n‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏ô Console > Storage ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏° path ‡πÉ‡∏ô log ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà'
            '\n‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ bucket ‡πÉ‡∏ô log ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Console'
            '\n‚Ä¢ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ Emulator ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå useStorageEmulator ‡∏≠‡∏≠‡∏Å',
          ),
        ),
      );
    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $e')));
    } finally {
      if (mounted) setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ")),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(20),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              DropdownButtonFormField<String>(
                initialValue: _vehicleType, // ‡πÉ‡∏ä‡πâ initialValue (‡πÅ‡∏ó‡∏ô value)
                decoration: const InputDecoration(labelText: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ"),
                items: const [
                  DropdownMenuItem(
                    value: "‡∏£‡∏ñ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß",
                    child: Text("‡∏£‡∏ñ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß"),
                  ),
                  DropdownMenuItem(
                    value: "‡∏£‡∏ñ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
                    child: Text("‡∏£‡∏ñ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"),
                  ),
                ],
                onChanged: (v) =>
                    setState(() => _vehicleType = v ?? "‡∏£‡∏ñ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß"),
              ),
              const SizedBox(height: 12),

              TextFormField(
                controller: _plateCtrl,
                decoration: InputDecoration(
                  labelText: "‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô",
                  prefixIcon: const Icon(
                    Icons.directions_car,
                    color: Colors.teal,
                  ),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                validator: (v) => (v == null || v.trim().isEmpty)
                    ? "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"
                    : null,
              ),
              const SizedBox(height: 16),

              GestureDetector(
                onTap: _pickImage,
                child: Container(
                  height: 180,
                  width: double.infinity,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(15),
                    color: Colors.grey[200],
                    border: Border.all(color: Colors.teal, width: 2),
                  ),
                  child: _imageFile == null
                      ? const Center(
                          child: Icon(
                            Icons.image,
                            size: 64,
                            color: Colors.grey,
                          ),
                        )
                      : ClipRRect(
                          borderRadius: BorderRadius.circular(15),
                          child: Image.file(_imageFile!, fit: BoxFit.cover),
                        ),
                ),
              ),
              const SizedBox(height: 24),

              SizedBox(
                width: double.infinity,
                child: ElevatedButton.icon(
                  onPressed: _isLoading ? null : _save,
                  icon: const Icon(Icons.cloud_upload),
                  label: _isLoading
                      ? SizedBox(
                          height: 20,
                          width: 20,
                          child: CircularProgressIndicator(
                            color: Colors.white,
                            strokeWidth: 2,
                          ),
                        )
                      : const Text("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î & ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.teal,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(vertical: 14),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
